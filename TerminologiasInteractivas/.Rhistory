score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
print(length(keySplt))
tempScore <- apply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
print(NROW(keySplt))
tempScore <- apply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
print(NROW(keySplt[[1]]))
tempScore <- apply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
print(NROW(keySplt[[1]]))
tempScore <- apply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
print(NROW(keySplt))
tempScore <- apply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
print(length(keySplt))
tempScore <- apply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
print(dim(keySplt))
tempScore <- apply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
tempScore <- lapply(keySplt, 1, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
append(tempScore, keyDegree / tabla[tabla$probando %in% x, ]$Freq)
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
# print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
eyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
# print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(tempScore)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
# print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(tempScore)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(tempScore)
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(class(tempScore))
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(class(tempScore[[1]]))
sum(tempScore)
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(class(tempScore[[1]]))
sum(tempScore[[1]])
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
#print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
#print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
#print(class(tempScore[[1]]))
sum(tempScore[[1]])
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
#print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
#print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(class(tempScore[[1]]))
sum(tempScore[[1]])
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
tic()
score3 = c()
fpruebaInterno = function(x) {
#print(x)
keyDegree / tabla[tabla$probando %in% x, ]$Freq
}
fprueba = function(x){
if(as.integer(x[3]) == 1){
0
} else {
keySplt <- strsplit(x[2], " ")[[1]]
keyDegree <<- as.integer(x[3]) - 1
tempScore <- c()
#print(keySplt)
# print(class(keySplt))
tempScore <- lapply(keySplt, fpruebaInterno)
print(sum(tempScore[[1]]))
sum(tempScore[[1]])
}
}
score3 <- apply(statsPOSSplit, 1, fprueba)
#Agrupamos la terminologia en funcion del documento, generando una terminología completa del corpus entero.
stats <- select(statsPOSRAKEScore, -c(doc_id))
stats <- aggregate(list(Frecuencia=stats$freq, RAKE1=stats$RAKE, RAKE2=stats$RAKE2), by=list(keyword=stats$keyword, ngram=stats$ngram), FUN=sum)
stats
View(stats)
pb = txtProgressBar(min = 0, max = nrow(stats), initial = 0)
cValue <- c()
tic()
for (keyIndex in 1:nrow(stats)) {
#Extraemos el termino candidato
candidate <- stats[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- stats[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato.
coincidencias <- stats[grepl(candidate ,stats$keyword, fixed = TRUE), ]
#Numero de coincidencias
ncoincidencias <- nrow(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
} else {
sumatorio <- sum(coincidencias$freq)
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate - (1 / ncoincidencias) * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
}
setTxtProgressBar(pb,keyIndex)
}
toc()
print("fin")
cbind(stats, cValue) -> statsPOSCVALUE
statsPOSCVALUE
pb = txtProgressBar(min = 0, max = nrow(stats), initial = 0)
cValue <- c()
tic()
library(readtext)
library(doParallel)
library(quanteda)
library(quanteda)
library(stringr)
library(udpipe)
library(dplyr)
pb = txtProgressBar(min = 0, max = nrow(stats), initial = 0)
cValue <- c()
tic()
pb = txtProgressBar(min = 0, max = nrow(stats), initial = 0)
cValue <- c()
tic()
library(tictoc)
pb = txtProgressBar(min = 0, max = nrow(stats), initial = 0)
cValue <- c()
tic()
for (keyIndex in 1:nrow(stats)) {
#Extraemos el termino candidato
candidate <- stats[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- stats[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato.
coincidencias <- stats[grepl(candidate ,stats$keyword, fixed = TRUE), ]
#Numero de coincidencias
ncoincidencias <- nrow(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
} else {
sumatorio <- sum(coincidencias$freq)
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate - (1 / ncoincidencias) * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
break
}
setTxtProgressBar(pb,keyIndex)
}
toc()
print("fin")
cbind(stats, cValue) -> statsPOSCVALUE
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
