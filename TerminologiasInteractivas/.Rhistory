print(statsPOS[statsPOS$keyword %in% word, ]$keyword)
print(statsPOS[statsPOS$keyword %in% word, ]$freq)
}
}
res <- log2(sapply(candidate, length)) * freqCandidate - 1 / ncoincidencias * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
#print(sapply(candidate, length))
print(freqCandidate)
print(ncoincidencias)
print(sumatorio)
#print(res)
}
}
statsPOS <- statsPOS[order(statsPOS$freq),]
cValue <- c()
for (keyIndex in 1:nrow(statsPOS)) {
#Extraemos el termino candidato
candidate <- statsPOS[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- statsPOS[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato
coincidencias <- c()
for (candidateMatchIndex in 1:nrow(statsPOS)) {
candidateMatch <- statsPOS[candidateMatchIndex, "keyword"]
if( grepl(candidate ,candidateMatch , ignore.case = FALSE, fixed = TRUE)){
append(coincidencias, candidateMatch) -> coincidencias
}
}
#Numero de coincidencias
ncoincidencias <- length(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(sapply(candidate, length)) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
print("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
print(candidate)
print(res)
} else {
print("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
print(candidate)
print("to")
#El candidato está contenido en al menos un termino más
sumatorio = 0
for (word in coincidencias) {
if(!(statsPOS[statsPOS$keyword %in% word, ]$keyword %in% candidate)) {
sumatorio = sumatorio + statsPOS[statsPOS$keyword == word, ]$freq
print(statsPOS[statsPOS$keyword %in% word, ]$keyword)
print(statsPOS[statsPOS$keyword %in% word, ]$freq)
}
}
res <- log2(sapply(candidate, length)) * freqCandidate - 1 / ncoincidencias * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
print(sapply(candidate, length))
print(freqCandidate)
print(ncoincidencias)
print(sumatorio)
print(res)
print("NEXT---------------------------------------------")
}
}
strsplit("La hora chanante", " ")
strsplit("La hora chanante", " ") -> a
length(a)
strsplit("La hora chanante", " ") -> a
length(a)
strsplit("La hora chanante", " ") -> a
class(a)
strsplit("La hora chanante", " ") -> a
nrow(a)
strsplit("La hora chanante", " ") -> a
length(a)
View(a)
View(a)
strsplit("La hora chanante", " ") -> a
length(a[])
strsplit("La hora chanante", " ") -> a
length(a[[]])
strsplit("La hora chanante", " ") -> a
length(a[[1]])
strsplit("La hora chanante", " ")[[1]]
length(a[[1]])
lenght(strsplit("La hora chanante", " ")[[1]])
length(strsplit("La hora chanante", " ")[[1]])
statsPOS <- statsPOS[order(statsPOS$freq),]
cValue <- c()
for (keyIndex in 1:nrow(statsPOS)) {
#Extraemos el termino candidato
candidate <- statsPOS[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- statsPOS[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato
coincidencias <- c()
for (candidateMatchIndex in 1:nrow(statsPOS)) {
candidateMatch <- statsPOS[candidateMatchIndex, "keyword"]
if( grepl(candidate ,candidateMatch , ignore.case = FALSE, fixed = TRUE)){
append(coincidencias, candidateMatch) -> coincidencias
}
}
#Numero de coincidencias
ncoincidencias <- length(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(sapply(candidate, length)) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
print("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
print(candidate)
print(res)
} else {
print("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
print(candidate)
print("to")
#El candidato está contenido en al menos un termino más
sumatorio = 0
for (word in coincidencias) {
if(!(statsPOS[statsPOS$keyword %in% word, ]$keyword %in% candidate)) {
sumatorio = sumatorio + statsPOS[statsPOS$keyword == word, ]$freq
print(statsPOS[statsPOS$keyword %in% word, ]$keyword)
print(statsPOS[statsPOS$keyword %in% word, ]$freq)
}
}
res <- log2(sapply(candidate, length)) * freqCandidate - 1 / ncoincidencias * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
print(length(strsplit(candidate, " ")[[1]]))
print(freqCandidate)
print(ncoincidencias)
print(sumatorio)
print(res)
print("NEXT---------------------------------------------")
}
}
statsPOS <- statsPOS[order(statsPOS$freq),]
cValue <- c()
for (keyIndex in 1:nrow(statsPOS)) {
#Extraemos el termino candidato
candidate <- statsPOS[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- statsPOS[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato
coincidencias <- c()
for (candidateMatchIndex in 1:nrow(statsPOS)) {
candidateMatch <- statsPOS[candidateMatchIndex, "keyword"]
if( grepl(candidate ,candidateMatch , ignore.case = FALSE, fixed = TRUE)){
append(coincidencias, candidateMatch) -> coincidencias
}
}
#Numero de coincidencias
ncoincidencias <- length(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(sapply(candidate, length)) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
print("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
print(candidate)
print(res)
} else {
print("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
print(candidate)
print("to")
#El candidato está contenido en al menos un termino más
sumatorio = 0
for (word in coincidencias) {
if(!(statsPOS[statsPOS$keyword %in% word, ]$keyword %in% candidate)) {
sumatorio = sumatorio + statsPOS[statsPOS$keyword == word, ]$freq
print(statsPOS[statsPOS$keyword %in% word, ]$keyword)
print(statsPOS[statsPOS$keyword %in% word, ]$freq)
}
}
res <- log2(sapply(candidate, length)) * freqCandidate - 1 / ncoincidencias * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
print("DATOS")
print(length(strsplit(candidate, " ")[[1]]))
print(freqCandidate)
print(ncoincidencias)
print(sumatorio)
print(res)
print("NEXT---------------------------------------------")
}
}
print("fin")
cbind(statsPOS, cValue) -> statsPOSCVALUE
statsPOS <- statsPOS[order(statsPOS$freq),]
cValue <- c()
for (keyIndex in 1:nrow(statsPOS)) {
#Extraemos el termino candidato
candidate <- statsPOS[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- statsPOS[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato
coincidencias <- c()
for (candidateMatchIndex in 1:nrow(statsPOS)) {
candidateMatch <- statsPOS[candidateMatchIndex, "keyword"]
if( grepl(candidate ,candidateMatch , ignore.case = FALSE, fixed = TRUE)){
append(coincidencias, candidateMatch) -> coincidencias
}
}
#Numero de coincidencias
ncoincidencias <- length(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
print("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
print(candidate)
print(res)
} else {
print("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")
print(candidate)
print("to")
#El candidato está contenido en al menos un termino más
sumatorio = 0
for (word in coincidencias) {
if(!(statsPOS[statsPOS$keyword %in% word, ]$keyword %in% candidate)) {
sumatorio = sumatorio + statsPOS[statsPOS$keyword == word, ]$freq
print(statsPOS[statsPOS$keyword %in% word, ]$keyword)
print(statsPOS[statsPOS$keyword %in% word, ]$freq)
}
}
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate - 1 / ncoincidencias * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
print("DATOS")
print(length(strsplit(candidate, " ")[[1]]))
print(freqCandidate)
print(ncoincidencias)
print(sumatorio)
print(res)
print("NEXT---------------------------------------------")
}
}
statsPOS <- statsPOS[order(statsPOS$freq),]
cValue <- c()
for (keyIndex in 1:nrow(statsPOS)) {
#Extraemos el termino candidato
candidate <- statsPOS[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- statsPOS[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato
coincidencias <- c()
for (candidateMatchIndex in 1:nrow(statsPOS)) {
candidateMatch <- statsPOS[candidateMatchIndex, "keyword"]
if( grepl(candidate ,candidateMatch , ignore.case = FALSE, fixed = TRUE)){
append(coincidencias, candidateMatch) -> coincidencias
}
}
#Numero de coincidencias
ncoincidencias <- length(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
} else {
#El candidato está contenido en al menos un termino más
sumatorio = 0
for (word in coincidencias) {
if(!(statsPOS[statsPOS$keyword %in% word, ]$keyword %in% candidate)) {
sumatorio = sumatorio + statsPOS[statsPOS$keyword == word, ]$freq
}
}
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate - 1 / ncoincidencias * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
}
}
statsPOS <- statsPOS[order(statsPOS$freq),]
cValue <- c()
for (keyIndex in 1:nrow(statsPOS)) {
#Extraemos el termino candidato
candidate <- statsPOS[keyIndex, "keyword"]
#Extraemos la frecuencia del candidato en el corpùs
freqCandidate <- statsPOS[keyIndex, "freq"]
#Buscamos terminos que contengan a nuestro candidato
coincidencias <- c()
for (candidateMatchIndex in 1:nrow(statsPOS)) {
candidateMatch <- statsPOS[candidateMatchIndex, "keyword"]
if( grepl(candidate ,candidateMatch , ignore.case = FALSE, fixed = TRUE)){
append(coincidencias, candidateMatch) -> coincidencias
}
}
#Numero de coincidencias
ncoincidencias <- length(coincidencias)
if(ncoincidencias == 1){
#El candidato no esta contenido en otro termino
#Calculamos c-value
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate
#Almacenamos el resultado
append(cValue, res) -> cValue
} else {
#El candidato está contenido en al menos un termino más
sumatorio = 0
for (word in coincidencias) {
if(!(statsPOS[statsPOS$keyword %in% word, ]$keyword %in% candidate)) {
sumatorio = sumatorio + statsPOS[statsPOS$keyword == word, ]$freq
}
}
res <- log2(length(strsplit(candidate, " ")[[1]])) * freqCandidate - 1 / ncoincidencias * sumatorio
#Almacenamos el resultado
append(cValue, res) -> cValue
}
}
print("fin")
cbind(statsPOS, cValue) -> statsPOSCVALUE
shiny::runApp()
library(readtext)
library(tictoc)
hilos = 8
#font_import()
#Ruta de trabajo
setwd("~/TFM")
#ruta = "/doc"
ruta = "/legal"
#ruta = "/Users/pedrohv/TFM/TerminologíasInteractivas/data/covid19/raw/documents"
#Leer un corpus
tic()
docs <- readtext(paste0(getwd(),ruta, "*"), #Leo todo lo que tenga ese path
#docvarsfrom = "filenames",
#docvarnames = c("document", "language"),
#dvsep = "_",
encoding = "UTF-8-BOM", #"ISO-8859-1", #Casi mejor no pongo nada porque no sÃ© el encoding
verbosity = 3)
toc()
print("Se han leido los documentos del corpus con éxito")
library(quanteda)
library(stringr)
tic()
# create quanteda corpus
quanteda_options(threads = hilos)
quancorpusDocs <- corpus(docs)
#Obtenemos un resumen del corpus que hemops creado
summ <- summary(quancorpusDocs,    #Esto tarda unos segundos. Types es el num de tokens Únicos.
n = nrow(docs))    #Por defecto son 100
sum(summ$Sentences)
sum(summ$Tokens)
#Puedo sacar los textos
tDocs <- texts(quancorpusDocs) #No tarda nada.
#Un vector nombrado (cada elemento tiene el nombre del doc).
#Cada elemento es una cadena con el texto del doc.
#Con este proceso limpiamos bien los documentos de caracteres extraños producidos por un error de lectura.
tDocs2 <- str_replace_all(tDocs, c("\001" = "",
"\002" = "",
"\003" = "",
"\004" = "",
"\005" = "",
"\006" = "",
"\f" = ""
)
)
#Debemos volver a establecer los nombres de los documentos, al limpiar los textos se pierden.
attr(tDocs2, 'names') <- attr(tDocs, 'names')
toc()
library(udpipe)
model <- udpipe_download_model(language = "spanish")
path <- model$file_model
tic()
x <- udpipe(tDocs2, path, parallel.cores = hilos)
toc()
x$phrase_tag <- as_phrasemachine(x$upos,
type = "upos" #Puede ser tambiÃ©n "penn-treebank"
)#Convierte los tags de upos a phrasemachine (Handler 2016).
tic()
statsPOS <- keywords_phrases(x = x$phrase_tag,
term = tolower(x$token),
pattern = "N(A|N)*(PD*N(A|N)*)*",
is_regex = TRUE,
detailed = FALSE
)
toc()
statsPOS
library(dplyr)
x$phrase_tag <- as_phrasemachine(x$upos,
type = "upos" #Puede ser tambiÃ©n "penn-treebank"
)#Convierte los tags de upos a phrasemachine (Handler 2016).
tic()
statsPOS2 <- data.frame()
statsPOSSplit <- data.frame()
split(x, x$doc_id) -> xSplit
for (doc_id in xSplit) {
statstTemp <- keywords_phrases(x = doc_id$phrase_tag,
term = tolower(doc_id$token),
pattern = "N(A|N)*(PD*N(A|N)*)*",
is_regex = TRUE,
detailed = FALSE
)
cbind(rep(doc_id$doc_id[1], nrow(statstTemp)), statstTemp) ->> statsPOS2
colnames(statsPOS2)[1] <- "doc_id"
rbind(statsPOS2, statsPOSSplit) ->> statsPOSSplit
}
toc()
statsPOSSplit
probando <- select(statsPOSSplit, -c(doc_id))
probando <- aggregate(statsPOSSplit$freq, statsPOSSplit$ngram, by=list(keyword=statsPOSSplit$keyword), FUN=sum)
colnames(probando)[2] <- "freq"
probando[order(-probando$freq),]
probando <- select(statsPOSSplit, -c(doc_id))
probando <- aggregate(statsPOSSplit$freq, statsPOSSplit$ngram, by=list(keyword=statsPOSSplit$keyword), FUN=sum)
colnames(probando)[2] <- "freq"
probando[order(-probando$freq),]
probando <- select(statsPOSSplit, -c(doc_id))
probando <- aggregate(statsPOSSplit$freq, by=list(keyword=statsPOSSplit$keyword), FUN=sum)
colnames(probando)[2] <- "freq"
probando[order(-probando$freq),]
probando <- select(statsPOSSplit, -c(doc_id))
probando <- aggregate(statsPOSSplit$freq, by=list(keyword=statsPOSSplit$keyword, ngram=statsPOSSplit$ngram), FUN=sum)
colnames(probando)[2] <- "freq"
probando[order(-probando$freq),]
probando <- select(statsPOSSplit, -c(doc_id))
probando <- aggregate(statsPOSSplit$freq, by=list(keyword=statsPOSSplit$keyword, ngram=statsPOSSplit$ngram), FUN=sum)
colnames(probando)[3] <- "freq"
probando[order(-probando$freq),]
total_words <- statsPOSSplit %>%
group_by(doc_id) %>%
summarize(total = sum(freq))
statsPOSSplit <- left_join(statsPOSSplit, total_words)
statsPOSSplit
library(tidytext)
statsPOSSplit <- statsPOSSplit %>%
bind_tf_idf(keyword, doc_id, freq)
statsPOSSplit[order(statsPOSSplit$keyword),]
score = c()
pb = txtProgressBar(min = 0, max = nrow(statsPOS), initial = 0)
for (keyIndex in 1:nrow(statsPOS)) {
if(statsPOS[keyIndex, "ngram"] == 1){
score <- append(score, 0)
} else {
keySplt <- strsplit(statsPOS[keyIndex, "keyword"], " ")
keyDegree <<- statsPOS[keyIndex, "ngram"] - 1
tempScore <- c()
for(word in keySplt){
tempScore <- append(tempScore, keyDegree / tablaPOS[tablaPOS$probandoPOS %in% word, ]$Freq)
}
score <- append(score, sum(tempScore))
}
setTxtProgressBar(pb,keyIndex)
}
probandoPOS <- strsplit(statsPOS$keyword, split = " ")
data.frame(splited = unlist(probandoPOS)) -> probandoPOS
table(probandoPOS) -> tablaPOS
tablaPOS <- data.frame(tablaPOS)
score = c()
pb = txtProgressBar(min = 0, max = nrow(statsPOS), initial = 0)
for (keyIndex in 1:nrow(statsPOS)) {
if(statsPOS[keyIndex, "ngram"] == 1){
score <- append(score, 0)
} else {
keySplt <- strsplit(statsPOS[keyIndex, "keyword"], " ")
keyDegree <<- statsPOS[keyIndex, "ngram"] - 1
tempScore <- c()
for(word in keySplt){
tempScore <- append(tempScore, keyDegree / tablaPOS[tablaPOS$probandoPOS %in% word, ]$Freq)
}
score <- append(score, sum(tempScore))
}
setTxtProgressBar(pb,keyIndex)
}
cbind(statsPOS, score) -> statsPOSRAKEScore
colnames(statsPOSRAKEScore)[4] <- "RAKE"
statsPOSRAKEScore <- statsPOSRAKEScore[order(-statsPOSRAKEScore$RAKE),]
statsPOSRAKEScore
shiny::runApp()
runApp()
runApp()
readRDS(paste0(getwd(),"/data/corpus_data/test/processed/corpus/metadata.rds")) -> test
source('~/TFM/TerminologiasInteractivas/modules/create_terminology.R', encoding = 'UTF-8')
debugSource('~/TFM/TerminologiasInteractivas/modules/create_terminology.R', encoding = 'UTF-8')
createTerminology(test, "test", "test", 8, "N(A|N)*(PD*N(A|N)*)*", "pos", "spanish-gsd")
library(shiny)
library(readtext)
library(tidyverse)
library(quanteda)
library(DT)
library(devtools)
library(profvis)
library(rlist)
library(png)
library(magick)
library(pdftools)
library(extrafont)
library(tictoc)
library(data.table)
library(zoo)
library(shinyWidgets)
library(shinyjs)
library(tools)
library(sos)
library(dplyr)
library(plyr)
library(shinybusy)
library(tidytext)
library(udpipe)
createTerminology(test, "test", "test", 8, "N(A|N)*(PD*N(A|N)*)*", "pos", "spanish-gsd")
createTerminology(test, "test", "test", 8, "N(A|N)*(PD*N(A|N)*)*", "pos", "spanish-gsd")
View(test)
View(test)
readRDS(paste0(getwd(),"/data/corpus_data/test/processed/corpus/corpus.rds")) -> test
createTerminology(test, "test", "test", 8, "N(A|N)*(PD*N(A|N)*)*", "pos", "spanish-gsd")
shiny::runApp()
runApp()
runApp()
runApp()
